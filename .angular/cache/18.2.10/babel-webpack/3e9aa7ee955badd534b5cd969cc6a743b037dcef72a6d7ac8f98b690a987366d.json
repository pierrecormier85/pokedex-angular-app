{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport { Pokemon } from './pokemon.model';\nimport { forkJoin, fromEvent, merge, Observable, Subject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { NotificationsService } from 'angular2-notifications';\nimport { Move } from './moves.model';\nimport { Machine } from './machine.model';\nimport { PokemonMove } from './pokemon-move.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"angular2-notifications\";\nexport let PokemonService = /*#__PURE__*/(() => {\n  class PokemonService {\n    constructor(http, _notifications) {\n      this.http = http;\n      this._notifications = _notifications;\n      this.pokemons = [];\n      this.pokemonsListChanged = new Subject();\n      this.noOfPokemonsLoaded = 0;\n      this.newPokemonsLoaded = new Subject();\n      this.activePokemon = new Subject();\n      this.previousPokemonID = new Subject();\n      this.firstTime = false;\n      this.renamedNames = {\n        29: 'Nidoran♀',\n        32: 'Nidoran♂',\n        83: 'Farfetch\\'d',\n        122: 'Mr. Mime',\n        386: 'Deoxys',\n        413: 'Wormadam',\n        439: 'Mime Jr.',\n        487: 'Giratina',\n        492: 'Shaymin',\n        550: 'Basculin',\n        555: 'Darmanitan',\n        641: 'Tornadus',\n        642: 'Thundurus',\n        645: 'Landorus',\n        647: 'Keldeo',\n        648: 'Meloetta',\n        669: 'Flabébé',\n        678: 'Meowstic',\n        681: 'Aegislash',\n        710: 'Pumpkaboo',\n        711: 'Gourgeist',\n        718: 'Zygarde',\n        741: 'Oricorio',\n        745: 'Lycanroc',\n        746: 'Wishiwashi',\n        772: 'Type: Null',\n        774: 'Minior',\n        778: 'Mimikyu',\n        785: 'Tapu Koko',\n        786: 'Tapu Lele',\n        787: 'Tapu Bulu',\n        788: 'Tapu Fini',\n        849: 'Toxtricity',\n        865: 'Sirfetch\\'d',\n        866: 'Mr. Rime',\n        875: 'Eiscue',\n        876: 'Indeedee',\n        877: 'Morpeko',\n        892: 'Urshifu',\n        902: 'Basculegion',\n        905: 'Enamorus'\n      };\n      this.searchItemSubject = new Subject();\n      this.EverythingLoaded = new Subject();\n      this.megaSwitchSubscription = new Subject();\n      this.versionSwitchSubscription = new Subject();\n      this.OpenMenu = new Subject();\n      this.megaSwitchSubscription.subscribe(res => {\n        this.megaEvolutionMainSwitch = res;\n      });\n      this.versionSwitchSubscription.subscribe(res => {\n        this.versionMainSwitch = res;\n      });\n      if (localStorage.getItem('visitedOnce') === null) {\n        this.firstTime = true;\n        localStorage.setItem('visitedOnce', 'true');\n      }\n      this.requestALL();\n      // Check Online Connectivity\n      this.createOnline$().subscribe(isOnline => {\n        const title = isOnline ? 'Online' : 'Offline';\n        const content = isOnline ? 'Images will load now ...' : 'New Images won\\'t be loaded ...';\n        if (isOnline) {\n          const toast = _notifications.success(title, content, {\n            timeOut: 10000,\n            showProgressBar: true,\n            pauseOnHover: true,\n            clickToClose: true\n          });\n        } else {\n          const toast = _notifications.error(title, content, {\n            timeOut: 10000,\n            showProgressBar: true,\n            pauseOnHover: true,\n            clickToClose: true\n          });\n        }\n      });\n      this.isMobile = this.isMobileBrowser(); //  Mobile Browser Check\n    }\n    isMobileBrowser() {\n      let check = false;\n      (function (a) {\n        if (/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(a.substr(0, 4))) {\n          check = true;\n        }\n      })(navigator.userAgent || navigator.vendor);\n      return check;\n    }\n    getPokemonSpeciesFromJSON() {\n      this.http.get('assets/data/pokemon-species.json').subscribe(response => {\n        this.pokemonSpeciesJSON = response['pokemon-species'];\n      });\n    }\n    getPokemonMovesFromCSV() {\n      this.pokemonMovesCSV = {};\n      this.http.get('assets/data/pokemon-moves.csv', {\n        responseType: 'text'\n      }).subscribe(data => {\n        const allTextLines = data.split(/\\r\\n|\\r|\\n/);\n        const headers = allTextLines[0].split(',');\n        for (let i = 1; i < allTextLines.length; i++) {\n          // split content based on comma\n          const rowData = allTextLines[i].split(',');\n          const pokemon_id = rowData[0];\n          if (this.pokemonMovesCSV[pokemon_id] === undefined) {\n            this.pokemonMovesCSV[pokemon_id] = [];\n          }\n          const move = new PokemonMove();\n          // const move = [];\n          for (let j = 0; j < headers.length - 1; j++) {\n            move[headers[j]] = rowData[j];\n          }\n          this.pokemonMovesCSV[pokemon_id].push(move);\n        }\n      }, error => {\n        console.log(error);\n      });\n    }\n    getPokemonFromJSON() {\n      this.http.get('assets/data/pokemon.json').subscribe(response => {\n        this.getMoveDetailsFromCSV();\n        this.pokemonJSON = response['pokemon'];\n        for (let i = 0; i < 1025; i++) {\n          const pokemonData = this.pokemonJSON[(i + 1).toString()];\n          const pokemonSpeciesData = this.pokemonSpeciesJSON[i];\n          const pokedex = pokemonSpeciesData['pokedex'];\n          this.pokemons.push(new Pokemon(\n          // from pokemon\n          pokemonSpeciesData['name'], pokemonData['id'], pokedex,\n          // null,\n          pokemonData['T'], pokemonData['Ab'], pokemonData['H'], pokemonData['W'], pokemonData['BE'],\n          // null,\n          pokemonData['HI'],\n          // null,\n          pokemonData['isD'],\n          // null,\n          this.pokemonMovesCSV[(i + 1).toString()],\n          // null,\n          pokemonData['St'], pokemonData['Sp'],\n          // from pokemon-species\n          pokemonSpeciesData, pokemonSpeciesData ? pokemonSpeciesData['Co'] : '', pokemonSpeciesData ? pokemonSpeciesData['G'] : '', pokemonSpeciesData ? pokemonSpeciesData['varieties'] : '', pokemonSpeciesData ? pokemonSpeciesData['EvC'] : ''));\n        }\n        this.newPokemonsLoaded.next(1025);\n        this.pokemonsListChanged.next(this.pokemons);\n      });\n    }\n    getMoveDetailsFromCSV() {\n      this.movesDetails = [];\n      this.http.get('assets/data/moves.csv', {\n        responseType: 'text'\n      }).subscribe(data => {\n        this.getMachinesFromCSV();\n        const allTextLines = data.split(/\\r\\n|\\r|\\n/);\n        const headers = allTextLines[0].split(',');\n        for (let i = 1; i < allTextLines.length; i++) {\n          const move = new Move();\n          // split content based on comma\n          const rowData = allTextLines[i].split(',');\n          for (let j = 0; j < headers.length; j++) {\n            if (rowData[j] === '') {\n              move[headers[j]] = '-';\n            } else {\n              move[headers[j]] = rowData[j];\n            }\n          }\n          this.movesDetails.push(move);\n        }\n      }, error => {\n        console.log(error);\n      });\n    }\n    getMachinesFromCSV() {\n      this.machineDetails = [];\n      this.http.get('assets/data/machines.csv', {\n        responseType: 'text'\n      }).subscribe(data => {\n        this.getMovesFlavorFromJSON();\n        const allTextLines = data.split(/\\r\\n|\\r|\\n/);\n        const headers = allTextLines[0].split(',');\n        for (let i = 1; i < allTextLines.length; i++) {\n          const machine = new Machine();\n          // split content based on comma\n          const rowData = allTextLines[i].split(',');\n          for (let j = 0; j < headers.length; j++) {\n            machine[headers[j]] = rowData[j];\n          }\n          this.machineDetails.push(machine);\n        }\n      }, error => {\n        console.log(error);\n      });\n    }\n    getMovesFlavorFromJSON() {\n      this.http.get('assets/data/move.json').subscribe(response => {\n        this.getEvoChainFromJSON();\n        this.moveJSON = response['moves'];\n      });\n    }\n    getEvoChainFromJSON() {\n      this.http.get('assets/data/evolution-chain.json').subscribe(response => {\n        this.getAbilityFromJSON();\n        this.evolutionChains = response['evolution-chains'];\n      });\n    }\n    getAbilityFromJSON() {\n      this.http.get('assets/data/ability.json').subscribe(response => {\n        this.abilityJSON = response['abilities'];\n        this.EverythingLoaded.next(true);\n      });\n    }\n    requestALL() {\n      const requests = [];\n      requests.push(this.http.get('assets/data/pokemon-species.json'));\n      requests.push(this.http.get('assets/data/pokemon-moves.csv', {\n        responseType: 'text'\n      }));\n      // requests.push(this.http.get('assets/data/pokemon.json'));\n      // requests.push(this.http.get('assets/data/moves.csv', {responseType: 'text'}));\n      // requests.push(this.http.get('assets/data/machines.csv', {responseType: 'text'}));\n      // requests.push(this.http.get('assets/data/move.json'));\n      // requests.push(this.http.get('assets/data/evolution-chain.json'));\n      // requests.push(this.http.get('assets/data/ability.json'));\n      this.pokemonMovesCSV = {};\n      forkJoin(requests).subscribe(([species, movesCSV]) => {\n        this.getPokemonFromJSON();\n        this.pokemonSpeciesJSON = species['pokemon-species'];\n        const data = movesCSV;\n        const allTextLines = data.split(/\\r\\n|\\r|\\n/);\n        const headers = allTextLines[0].split(',');\n        for (let i = 1; i < allTextLines.length; i++) {\n          // split content based on comma\n          const rowData = allTextLines[i].split(',');\n          const pokemon_id = rowData[0];\n          if (this.pokemonMovesCSV[pokemon_id] === undefined) {\n            this.pokemonMovesCSV[pokemon_id] = [];\n          }\n          const move = new PokemonMove();\n          // const move = [];\n          for (let j = 0; j < headers.length - 1; j++) {\n            move[headers[j]] = rowData[j];\n          }\n          this.pokemonMovesCSV[pokemon_id].push(move);\n        }\n      });\n    }\n    createOnline$() {\n      return merge(fromEvent(window, 'offline').pipe(map(() => false)), fromEvent(window, 'online').pipe(map(() => true)), new Observable(sub => {\n        sub.next(navigator.onLine);\n        sub.complete();\n      }));\n    }\n    static #_ = (() => this.ɵfac = function PokemonService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || PokemonService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.NotificationsService));\n    })();\n    static #_2 = (() => this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: PokemonService,\n      factory: PokemonService.ɵfac,\n      providedIn: 'root'\n    }))();\n  }\n  return PokemonService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}